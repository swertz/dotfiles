set nocompatible	" Use Vim defaults (much better!)
set encoding=utf-8
filetype off
let g:loaded_python_provider = 0
if !empty($VIRTUAL_ENV)
    let g:python3_host_prog = '/t3home/swertz/bambooDev/bamboovenv/bin/python3'
endif

" change leader key
let mapleader = ","

"""" VUNDLE STUFF
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)

Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs' " NERDtree with tabs
Plugin 'altercation/vim-colors-solarized'
Plugin 'vim-scripts/indentpython.vim' " Standard python indentation
"if has('python3')
    "if has('nvim')
        "Plugin 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    "else
        "Plugin 'Shougo/deoplete.nvim'
        "Plugin 'roxma/nvim-yarp'
        "Plugin 'roxma/vim-hug-neovim-rpc'
    "endif
    "let g:deoplete#enable_at_startup = 1
"endif
Plugin 'Valloric/YouCompleteMe'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
if executable('ctags')
    Plugin 'majutsushi/tagbar'
endif
Plugin 'universal-ctags/ctags' " not a plugin, needs to be compiled & installed for tagbar to work
Plugin 'vim-syntastic/syntastic'
Plugin 'scrooloose/nerdcommenter'
Plugin 'Yggdroot/indentLine'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

""""" END VUNDLE

" Nerdtree configuration
let g:nerdtree_tabs_autoclose = 1
let NERDTreeIgnore=['\.pyc$', '\~$'] " ignore files in NERDTree
let NERDTreeMapOpenInTab='<ENTER>'
map <C-n> :NERDTreeToggle %<CR>

" YCM configuration
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_goto_buffer_command = 'vertical-split'
let g:ycm_autoclose_preview_window_after_completion=1
nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>jl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gd :YcmCompleter GetDoc<CR>
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" Powerline configuration
set laststatus=2 " otherwise doesn't show unless the screen is split

" Tagbar configuration
map <C-b> :TagbarToggle<CR>

" deoplete configuration
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" Syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_cpp_no_include_search = 1
let g:syntastic_cpp_compiler_options = ' -std=c++11'
let g:syntastic_cpp_remove_include_errors = 1

let g:syntastic_python_checkers=['flake8', 'python3']
let g:syntastic_python_flake8_args='--ignore=B007,E116,E128,E201,E202,E203,E231,E266,E302,E303,E402,E501,F401,F841'
let g:syntastic_quiet_messages = { "type": "style" }

" nerdcommenter
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
let g:NERDRemoveExtraSpace = 1
let g:NERDToggleCheckAllLines = 1

" indentLine config
let g:indentLine_char = '‚ñè'

"This unsets the last search pattern highlighting
nnoremap <CR> :noh<CR><CR>:<backspace>

" split tabs one-stroke navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Flag bad whitespaces (doesn't work for some reason)
" au BufRead,BufNewFile *.py,*.pyw,*.c,*.cc,*.cpp,*.h,*.hpp match BadWhitespace /\s\+$/

" ensure correct encoding
if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
   set fileencodings=ucs-bom,utf-8,latin1
endif

set viminfo='20,\"50	" read/write a .viminfo file, don't store more than 50 lines of registers
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time

set bs=indent,eol,start		" allow backspacing over everything in insert mode
set ai			" always set autoindenting on
set tabstop=4
set shiftwidth=4
set softtabstop=4	" set indent length to 4 spaces
set expandtab
set number
set showcmd
set mouse=a
set showmatch " Visually display matching braces
set splitright " Open vsplit on the right

if has("mouse_sgr")
    set ttymouse=sgr
elseif !has('nvim')
    set ttymouse=xterm2
end

" Initially ignore cases in searches
set ignorecase
" Smart case searching. Case insensitive if all lowercase, but if you
" provide uppercase it will force matching case
set smartcase

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
    let python_highlight_all=1
    let g:solarized_italic=1
    let g:solarized_term_italics=1
    syntax on
    set background=light
    colorscheme solarized
    set hlsearch
endif


" Only do this part when compiled with support for autocommands
if has("autocmd")
  augroup redhat
  autocmd!
  " In text files, always limit the width of text to 78 characters
  autocmd BufRead *.txt set tw=78
  " When editing a file, always jump to the last cursor position
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif
  " don't write swapfile on most commonly used directories for NFS mounts or USB sticks
  autocmd BufNewFile,BufReadPre /media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp
  " start with spec file template
  autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec
  augroup END
endif

if has("cscope") && filereadable("/usr/bin/cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add cscope.out
   " else add database pointed to by environment
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   endif
   set csverb
endif

if &term=="xterm"
     set t_Co=8
     set t_Sb=[4%dm
     set t_Sf=[3%dm
endif

" Don't wake up system with blinking cursor:
" http://www.linuxpowertop.org/known.php
let &guicursor = &guicursor . ",a:blinkon0"

" Fix home/end keys in tmux
inoremap <C-a> <Home>
inoremap <C-e> <End>

augroup filetypedetect
    " associate *.FCMacro with python filetype
    au BufRead,BufNewFile *.FCMacro setfiletype python
augroup END
